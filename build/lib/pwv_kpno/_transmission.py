#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

#    This file is part of the pwv_kpno software package.
#
#    The pwv_kpno package is free software: you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    The pwv_kpno package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with pwv_kpno.  If not, see <http://www.gnu.org/licenses/>.

"""This document defines end user functions for accessing the modeled
atmospheric transmission.  It relies heavily on the atmospheric transmission
models generated by _atm_model.py and the modeled PWV level at Kitt Peak
generated by _pwv_data.py.

End user functions defined in this document include:
    - transmission
    - transmission_pwv
"""

from datetime import datetime, timedelta
from warnings import warn

import numpy as np
from pytz import utc
from astropy.table import Table
from scipy.interpolate import interpn

from ._settings import Settings, ATM_MODEL_PATH
from ._pwv_data import pwv_date

__author__ = 'Daniel Perrefort'
__copyright__ = 'Copyright 2017, Daniel Perrefort'
__credits__ = ['Michael Wood-Vasey']

__license__ = 'GPL V3'
__email__ = 'djperrefort@gmail.com'
__status__ = 'Development'


def _timestamp(date):
    """Returns seconds since epoch of a UTC datetime in %Y-%m-%dT%H:%M format

    This function provides comparability for Python 2.7, for which the
    datetime.timestamp method was not yet available.

    Args:
        date (datetime.datetime): A datetime to find the timestamp for

    Returns:
        The timestamp of the provided datetime as a float
    """

    unix_epoch = datetime(1970, 1, 1, tzinfo=utc)
    utc_date = date.astimezone(utc)
    timestamp = (utc_date - unix_epoch).total_seconds()
    return timestamp


def _raise_pwv(pwv):
    """Raise exception if pwv argument has wrong type or value

    Provides type and value checking for a PWV concentration. PWV values should
    be wither a float or int in the range 0 <= pwv <= 30.1

    Args:
        pwv (int, float): A PWV concentration in mm

    Returns:
        None
    """

    if not isinstance(pwv, (int, float)):
        raise TypeError('PWV concentration must be int or float')

    if pwv < 0:
        raise ValueError('PWV concentration cannot be negative')

    if pwv > 30.1:
        warn_msg = ('Transmission values for PWV above 30.1 mm are'
                    'extrapolated instead of interpolated.')

        warn(warn_msg, RuntimeWarning)


def trans_from_pwv(pwv):
    """Return the atmospheric transmission due a given PWV concentration in mm

    For a given precipitable water vapor concentration, return the modeled
    atmospheric transmission function. The modeled transmission is returned as
    an astropy table with the columns 'wavelength' and 'transmission'.
    Wavelength values range from 7000 to 10,000 angstroms.

    Args:
        pwv (int, float): A PWV concentration in mm

    Returns:
        The modeled transmission function as an astropy table.
    """

    _raise_pwv(pwv)

    location_name = Settings().current_location.name
    atm_model = Table.read(ATM_MODEL_PATH.format(location_name))
    wavelengths = atm_model['wavelength']
    atm_model.remove_column('wavelength')

    pwv_values = []
    array_shape = (len(atm_model.colnames), len(wavelengths))
    transmission_models = np.zeros(array_shape, dtype=np.float)

    for i, column in enumerate(atm_model.itercols()):
        pwv_values.append(float(column.name))
        transmission_models[i, :] = column

    # interpn will automatically extrapolate for values outside the domain
    interp_trans = interpn(points=(pwv_values, wavelengths),
                           values=transmission_models,
                           xi=np.array([[pwv, x] for x in wavelengths]))

    trans_func = Table([wavelengths, interp_trans],
                       names=['wavelength', 'transmission'],
                       dtype=[float, float])

    trans_func['wavelength'].unit = 'angstrom'
    trans_func['transmission'].unit = 'percent'
    return trans_func


def _raise_transmission_args(date, airmass):
    """Raise exception if arguments of `transmission` have wrong type or value

    This function provides type and value checks for arguments of the
    function `transmission`. If a test fails, and exception is raised.

    Args:
        date    (datetime.datetime): A datetime value
        airmass             (float): An airmass value

    Returns:
        None
    """

    if not isinstance(date, datetime):
        raise TypeError("Argument 'date' (pos 1) must be a datetime instance")

    if date.tzinfo is None:
        err_msg = "Argument 'date' (pos 1) has no timezone information."
        raise ValueError(err_msg)

    if date.year < 2010:
        err_msg = "Cannot model years before 2010 (passed {})"
        raise ValueError(err_msg.format(date.year))

    if date > datetime.now(utc):
        err_msg = "Cannot model dates in the future (passed {})"
        raise ValueError(err_msg.format(date))

    if not isinstance(airmass, (float, int)):
        raise TypeError("Argument 'airmass' (pos 2) must be an int or float")


def _raise_available_data(date, pwv_model):
    """Check if a date falls within the range of data in an astropy table

    Checks if a datetime falls within the range of available data in an astropy
    table. If not, or if no data is available near that datetime within three
    days, an exception is raised

    Args:
        date   (datetime): A timezone aware datetime
        pwv_model (Table): An astropy table containing columns 'date' and 'pwv'

    Returns:
        None
    """

    # Check date falls within the range of available PWV data
    timestamp = _timestamp(date)
    w_data_less_than = np.where(pwv_model['date'] < timestamp)[0]
    if len(w_data_less_than) < 1:
        min_date = datetime.utcfromtimestamp(min(pwv_model['date']))
        msg = 'No local SuomiNet data found for datetimes before {0}'
        raise ValueError(msg.format(min_date))

    w_data_greater_than = np.where(timestamp < pwv_model['date'])[0]
    if len(w_data_greater_than) < 1:
        max_date = datetime.utcfromtimestamp(max(pwv_model['date']))
        msg = 'No local SuomiNet data found for datetimes after {0}'
        raise ValueError(msg.format(max_date))

    # Check for SuomiNet data available near the given date
    diff = pwv_model['date'] - timestamp
    interval = min(diff[diff > 0]) - max(diff[diff < 0])
    three_days_in_seconds = 3 * 24 * 60 * 60

    if three_days_in_seconds < interval:
        msg = ('Specified datetime falls within interval of missing SuomiNet' +
               ' data larger than 3 days ({0} interval found).')
        raise ValueError(msg.format(timedelta(seconds=interval)))


def trans_from_date(date, airmass, test_model=None):
    """Return a model for the atmospheric transmission function due to PWV

    For a given datetime and airmass, return a model for the atmospheric
    transmission function due to precipitable water vapor (PWV) at Kitt Peak.
    The modeled transmission is returned as an astropy table with the columns
    'wavelength' and 'transmission'. Wavelength values range from 7000 to
    10,000 angstroms.

    Args:
        date (datetime.datetime): The datetime of the desired model
        airmass          (float): The airmass of the desired model

    Returns:
        The modeled transmission function as an astropy table
    """

    pwv = pwv_date(date, airmass, test_model)
    return trans_from_pwv(pwv)
